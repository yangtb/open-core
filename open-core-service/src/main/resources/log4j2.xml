<?xml version="1.0" encoding="UTF-8"?>
<!-- status=debug 可以查看log4j的装配过程，monitorInterval运行时，动态重新加载log4j2配置文件的间隔时间，单位秒 -->
<configuration status="${log4j2.level}" monitorInterval="3600">

	<properties>
		<property name="CONSOLE_LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight{%5p} %style{%processId}{magenta} --- [%15.15t] %style{%-40.40c{1.}}{cyan} : %m%n</property>
		<property name="FILE_LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %5p %processId --- [%15.15t] %-40.40c{1.} : %m%n</property>
	</properties>

	<Appenders>
		<!-- 输出到控制台 -->
		<Console name="Console" target="SYSTEM_OUT">
			<!-- 需要记录的级别 -->
			<!-- <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" /> -->
			<PatternLayout pattern="${CONSOLE_LOG_PATTERN}" />
		</Console>

		<!-- 输出到文件，按天分割 -->
		<RollingRandomAccessFile name="default" immediateFlush="${log4j2.immediateFlush}"
								 append="true" fileName="${log4j2.log.basePath}/${app.name}.log"
								 filePattern="${log4j2.log.basePath}/${app.name}%d{yyyy-MM-dd}.log">
			<PatternLayout pattern="${FILE_LOG_PATTERN}" />
			<Policies>
				<!-- TimeBased Triggering Policy 基于时间的触发策略。该策略主要是完成周期性的log文件封存工作。有两个参数：
					interval，integer型，指定两次封存动作之间的时间间隔。单位:以日志的命名精度来确定单位，比如上面的filePattern中的yyyy-MM-dd-HH 单位为小时，yyyy-MM-dd-HH-mm 单位为分钟
					modulate，boolean型，说明是否对封存时间进行调制。若modulate=true，则封存时间将以0点为边界进行偏移计算。
					比如，modulate=true，interval=4hours，那么假设上次封存日志的时间为03:00，则下次封存日志的时间为04:00，之后的封存时间依次为08:00，12:00，16:00，。。。-->
				<TimeBasedTriggeringPolicy interval="1" modulate="true" />
			</Policies>
		</RollingRandomAccessFile>

		<!-- 失败日志 -->
		<RollingRandomAccessFile name="error" immediateFlush="${log4j2.immediateFlush}"
								 append="true" fileName="${log4j2.log.basePath}/error.log"
								 filePattern="${log4j2.log.basePath}/error_%d{yyyy-MM-dd}.log">
			<Filters>
				<ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
			</Filters>
			<PatternLayout pattern="${FILE_LOG_PATTERN}" />
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" modulate="true" />
			</Policies>
		</RollingRandomAccessFile>

	</Appenders>
	<Loggers>
		<Root level="${log4j2.level}"> <!-- 全局配置 -->
			<AppenderRef ref="Console" />
			<AppenderRef ref="default" />
			<AppenderRef ref="error" />
		</Root>

		<!-- 为sql语句配置特殊的Log级别，方便调试 -->
		<Logger name="com.sm.open.core.dal" level="${log4j2.sql.level}" additivity="false">
			<AppenderRef ref="Console" />
		</Logger>
		<Logger name="druid.sql.Statement" level="${log4j2.sql.level}" additivity="false">
			<AppenderRef ref="Console" />
		</Logger>
		<Logger name="druid.sql.ResultSet" level="${log4j2.sql.level}" additivity="false">
			<AppenderRef ref="Console" />
		</Logger>
		<Logger name="org.springframework.core" level="error" additivity="false">
			<AppenderRef ref="Console" />
			<AppenderRef ref="error" />
		</Logger>
		<Logger name="com.alibaba.dubbo" level="error" additivity="false">
			<AppenderRef ref="Console" />
			<AppenderRef ref="error" />
		</Logger>
		<Logger name="org.apache.zookeeper" level="error" additivity="false">
			<AppenderRef ref="Console" />
			<AppenderRef ref="error" />
		</Logger>
	</Loggers>
</configuration>